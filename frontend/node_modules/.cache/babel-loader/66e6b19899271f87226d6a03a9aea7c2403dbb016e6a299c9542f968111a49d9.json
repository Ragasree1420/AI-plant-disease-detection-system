{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gadda\\\\Downloads\\\\Plant Disease-Backup - Copy\\\\ps\\\\ps\\\\frontend\\\\src\\\\pages\\\\ImageUpload.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './ImageUpload.css';\n\n// function ImageUpload() {\n//     const [file, setFile] = useState(null);\n//     const [results, setResults] = useState([]);\n//     const [loading, setLoading] = useState(false);\n\n//     const handleFileChange = (e) => {\n//         setFile(e.target.files[0]);\n//     };\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n//         if (!file) return;\n\n//         const formData = new FormData();\n//         formData.append('image', file);\n\n//         setLoading(true);\n//         try {\n//             const token = localStorage.getItem('token');\n//             const response = await axios.post('http://localhost:5000/api/upload', formData, {\n//                 headers: { \n//                     'Content-Type': 'multipart/form-data',\n//                     'Authorization': `Bearer ${token}`\n//                 },\n//             });\n\n//             // Sort the results by confidence scores in ascending order\n//             const sortedResults = response.data.diagnosis;\n//             setResults(sortedResults);\n\n//         } catch (error) {\n//             console.error('Error:', error);\n//             setResults([{ label: 'Error processing image', score: 0 }]);\n//         }\n//         setLoading(false);\n//     };\n\n//     return (\n\n//         <div className=\"upload-container\">\n//             <meta charSet=\"UTF-8\" />\n//             <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n//             <h2>Plant Disease Detection</h2>\n//             <form onSubmit={handleSubmit}>\n//                 <input type=\"file\" onChange={handleFileChange} />\n//                 <button type=\"submit\" disabled={loading}>Upload</button>\n//             </form>\n//             {loading && <p>Loading...</p>}\n//             <div className=\"results-container\">\n//                 {results.map((result, index) => (\n//                     <div key={index} className=\"result-box\">\n//                         <h3>{result.label}</h3>\n//                         <p>Confidence: {(result.score * 100).toFixed(2)}%</p>                       \n//                     </div>\n//                 ))}\n//             </div>\n\n//         </div>\n//     );\n// }\n\n// export default ImageUpload;\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import \"./ImageUpload.css\";\n\n// function ImageUpload() {\n//   const [file, setFile] = useState(null);\n//   const [result, setResult] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [errorMessage, setErrorMessage] = useState(\"\");\n\n//   const handleFileChange = (e) => {\n//     setFile(e.target.files[0]);\n//     setErrorMessage(\"\");\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!file) return;\n\n//     const formData = new FormData();\n//     formData.append(\"image\", file);\n\n//     setLoading(true);\n//     setResult(null);\n//     setErrorMessage(\"\");\n\n//     try {\n//       const token = localStorage.getItem(\"token\");\n//       const response = await axios.post(\"http://localhost:5000/api/upload\", formData, {\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//           Authorization: `Bearer ${token}`,\n//         },\n//       });\n\n//       // Updated to handle a single result\n//       setResult({\n//         label: response.data.diagnosis.label,\n//         score: response.data.diagnosis.score,\n//         imageUrl: response.data.imageUrl,\n//       });\n//     } catch (error) {\n//       setErrorMessage(error.response?.data?.message || \"Error processing image\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"upload-container\">\n//       <h2>Plant Disease Detection</h2>\n//       <form onSubmit={handleSubmit}>\n//         <input type=\"file\" onChange={handleFileChange} />\n//         <button type=\"submit\" disabled={loading}>\n//           Upload\n//         </button>\n//       </form>\n//       {loading && <p>Loading...</p>}\n//       {errorMessage && <p className=\"error\">{errorMessage}</p>}\n//       <div className=\"result-container\">\n//         {result && (\n//           <div className=\"result-box\">\n//             <img\n//               src={result.imageUrl || \"https://via.placeholder.com/200\"}\n//               alt=\"Uploaded Leaf\"\n//               style={{ maxWidth: \"200px\", maxHeight: \"200px\" }}\n//             />\n//             <h3>Disease Detected: {result.label}</h3>\n//             <p>Confidence: {(result.score * 100).toFixed(2)}%</p>\n//           </div>\n//         )}\n//         </div>\n\n//     </div>\n//   );\n// }\n\n// export default ImageUpload;\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import \"./ImageUpload.css\";\n\n// function ImageUpload() {\n//   const [file, setFile] = useState(null);\n//   const [result, setResult] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [errorMessage, setErrorMessage] = useState(\"\");\n\n//   const handleFileChange = (e) => {\n//     setFile(e.target.files[0]);\n//     setErrorMessage(\"\"); // Reset error message when selecting a new file\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!file) {\n//       setErrorMessage(\"Please select a file to upload.\");\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append(\"image\", file);\n\n//     setLoading(true);\n//     setResult(null);\n//     setErrorMessage(\"\");\n\n//     try {\n//       const token = localStorage.getItem(\"token\");\n//       if (!token) {\n//         throw new Error(\"No token found. Please log in again.\");\n//       }\n\n//       const response = await axios.post(\n//         \"http://localhost:5000/api/upload\",\n//         formData,\n//         {\n//           headers: {\n//             \"Content-Type\": \"multipart/form-data\",\n//             Authorization: `Bearer ${token}`,\n//           },\n//         }\n//       );\n\n//       // Handle the response with a single result\n//       setResult({\n//         label: response.data.diagnosis.label,\n//         score: response.data.diagnosis.score,\n//         imageUrl: response.data.imageUrl,\n//       });\n//     } catch (error) {\n//       setErrorMessage(\n//         error.response?.data?.message || \"Error processing image\"\n//       );\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"upload-container\">\n//       <h2>Plant Disease Detection</h2>\n//       <form onSubmit={handleSubmit}>\n//         <input type=\"file\" onChange={handleFileChange} />\n//         <button type=\"submit\" disabled={loading}>\n//           {loading ? \"Uploading...\" : \"Upload\"}\n//         </button>\n//       </form>\n//       {loading && <p>Loading...</p>}\n//       {errorMessage && <p className=\"error\">{errorMessage}</p>}\n//       <div className=\"result-container\">\n//         {result && (\n//           <div className=\"result-box\">\n//             <img\n//               src={result.imageUrl || \"https://via.placeholder.com/200\"}\n//               alt=\"Uploaded Leaf\"\n//               style={{ maxWidth: \"200px\", maxHeight: \"200px\" }}\n//             />\n//             <h3>Disease Detected: {result.label}</h3>\n//             <p>Confidence: {(result.score * 100).toFixed(2)}%</p>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default ImageUpload;\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./ImageUpload.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageUpload() {\n  _s();\n  // Define state variables\n  const [file, setFile] = useState(null);\n  const [previewUrl, setPreviewUrl] = useState(null);\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [diseaseDetails, setDiseaseDetails] = useState(null);\n  const handleFileChange = e => {\n    const selectedFile = e.target.files[0];\n    if (selectedFile) {\n      if (selectedFile.size > 2 * 1024 * 1024) {\n        setErrorMessage(\"File size must be less than 2MB.\");\n        return;\n      }\n      setFile(selectedFile);\n      setPreviewUrl(URL.createObjectURL(selectedFile));\n      setErrorMessage(\"\"); // Reset error message\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!file) {\n      setErrorMessage(\"Please select a file to upload.\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"image\", file);\n    setLoading(true);\n    setResult(null);\n    setDiseaseDetails(null); // Clear previous details\n    setErrorMessage(\"\");\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        throw new Error(\"No token found. Please log in again.\");\n      }\n\n      // Call the existing API to process the uploaded image\n      const response = await axios.post(\"http://localhost:5000/api/upload\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // Set the diagnosis result from the response\n      setResult({\n        label: response.data.diagnosis.label,\n        score: response.data.diagnosis.score,\n        imageUrl: response.data.imageUrl\n      });\n    } catch (error) {\n      var _error$response, _error$response$data;\n      setErrorMessage(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"An unexpected error occurred. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchDiseaseDetails = async diseaseName => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/api/diseases\");\n      const disease = response.data.find(d => d.diseaseName === diseaseName);\n      if (disease) {\n        setDiseaseDetails(disease.details);\n      } else {\n        setDiseaseDetails({\n          disease_symptoms: \"Details for this disease are not available.\",\n          organic_treatment: \"N/A\",\n          inorganic_treatment: \"N/A\",\n          preventive_measure: \"N/A\",\n          conclusion: \"Please consult a local agricultural expert.\"\n        });\n      }\n    } catch (error) {\n      setDiseaseDetails({\n        disease_symptoms: \"Failed to fetch disease details.\",\n        organic_treatment: \"N/A\",\n        inorganic_treatment: \"N/A\",\n        preventive_measure: \"N/A\",\n        conclusion: \"Please check your internet connection.\"\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Image Uploading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"upload-box\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"upload-preview\",\n              children: [previewUrl ? /*#__PURE__*/_jsxDEV(\"img\", {\n                src: previewUrl,\n                alt: \"Preview\",\n                className: \"upload-icon\",\n                style: {\n                  maxWidth: \"200px\",\n                  maxHeight: \"200px\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"iupload.png\",\n                alt: \"Upload Icon\",\n                className: \"upload-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Upload Image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"file-upload\",\n              className: \"upload-label\",\n              children: \"Select Image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              id: \"file-upload\",\n              onChange: handleFileChange,\n              accept: \"image/*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"file-info\",\n              children: \"File size must be less than 2MB\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"file-info\",\n              children: \"Do not upload other than leaf images\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            disabled: loading,\n            children: loading ? \"Uploading...\" : \"Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 23\n        }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error\",\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 28\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"note-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Note:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Do not upload other than leaf images.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Ensure the file size is less than 2MB.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: result.imageUrl || \"https://via.placeholder.com/200\",\n            alt: \"Uploaded Leaf\",\n            style: {\n              maxWidth: \"200px\",\n              maxHeight: \"200px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Disease Detected: \", result.label]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Confidence: \", (result.score * 100).toFixed(2), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => fetchDiseaseDetails(result.label),\n            className: \"details-button\",\n            children: \"Show Disease Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 11\n      }, this), diseaseDetails && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"disease-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Disease Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Symptoms:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 16\n          }, this), \" \", diseaseDetails.disease_symptoms]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Organic Treatment:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 16\n          }, this), \" \", diseaseDetails.organic_treatment]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Inorganic Treatment:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 16\n          }, this), \" \", diseaseDetails.inorganic_treatment]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Preventive Measures:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 16\n          }, this), \" \", diseaseDetails.preventive_measure]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Conclusion:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 16\n          }, this), \" \", diseaseDetails.conclusion]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 337,\n    columnNumber: 5\n  }, this);\n}\n_s(ImageUpload, \"yNWZ0Cc4zJEaWnZKpD68cp3O9KU=\");\n_c = ImageUpload;\nexport default ImageUpload;\nvar _c;\n$RefreshReg$(_c, \"ImageUpload\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ImageUpload","_s","file","setFile","previewUrl","setPreviewUrl","result","setResult","loading","setLoading","errorMessage","setErrorMessage","diseaseDetails","setDiseaseDetails","handleFileChange","e","selectedFile","target","files","size","URL","createObjectURL","handleSubmit","preventDefault","formData","FormData","append","token","localStorage","getItem","Error","response","post","headers","Authorization","label","data","diagnosis","score","imageUrl","error","_error$response","_error$response$data","message","fetchDiseaseDetails","diseaseName","get","disease","find","d","details","disease_symptoms","organic_treatment","inorganic_treatment","preventive_measure","conclusion","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","id","src","alt","style","maxWidth","maxHeight","htmlFor","type","onChange","accept","disabled","toFixed","onClick","_c","$RefreshReg$"],"sources":["C:/Users/gadda/Downloads/Plant Disease-Backup - Copy/ps/ps/frontend/src/pages/ImageUpload.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import './ImageUpload.css';\r\n\r\n// function ImageUpload() {\r\n//     const [file, setFile] = useState(null);\r\n//     const [results, setResults] = useState([]);\r\n//     const [loading, setLoading] = useState(false);\r\n\r\n//     const handleFileChange = (e) => {\r\n//         setFile(e.target.files[0]);\r\n//     };\r\n\r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n//         if (!file) return;\r\n\r\n//         const formData = new FormData();\r\n//         formData.append('image', file);\r\n\r\n//         setLoading(true);\r\n//         try {\r\n//             const token = localStorage.getItem('token');\r\n//             const response = await axios.post('http://localhost:5000/api/upload', formData, {\r\n//                 headers: { \r\n//                     'Content-Type': 'multipart/form-data',\r\n//                     'Authorization': `Bearer ${token}`\r\n//                 },\r\n//             });\r\n\r\n//             // Sort the results by confidence scores in ascending order\r\n//             const sortedResults = response.data.diagnosis;\r\n//             setResults(sortedResults);\r\n\r\n//         } catch (error) {\r\n//             console.error('Error:', error);\r\n//             setResults([{ label: 'Error processing image', score: 0 }]);\r\n//         }\r\n//         setLoading(false);\r\n//     };\r\n\r\n//     return (\r\n        \r\n//         <div className=\"upload-container\">\r\n//             <meta charSet=\"UTF-8\" />\r\n//             <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n//             <h2>Plant Disease Detection</h2>\r\n//             <form onSubmit={handleSubmit}>\r\n//                 <input type=\"file\" onChange={handleFileChange} />\r\n//                 <button type=\"submit\" disabled={loading}>Upload</button>\r\n//             </form>\r\n//             {loading && <p>Loading...</p>}\r\n//             <div className=\"results-container\">\r\n//                 {results.map((result, index) => (\r\n//                     <div key={index} className=\"result-box\">\r\n//                         <h3>{result.label}</h3>\r\n//                         <p>Confidence: {(result.score * 100).toFixed(2)}%</p>                       \r\n//                     </div>\r\n//                 ))}\r\n//             </div>\r\n\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default ImageUpload;\r\n// import React, { useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import \"./ImageUpload.css\";\r\n\r\n// function ImageUpload() {\r\n//   const [file, setFile] = useState(null);\r\n//   const [result, setResult] = useState(null);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n//   const handleFileChange = (e) => {\r\n//     setFile(e.target.files[0]);\r\n//     setErrorMessage(\"\");\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     if (!file) return;\r\n\r\n//     const formData = new FormData();\r\n//     formData.append(\"image\", file);\r\n\r\n//     setLoading(true);\r\n//     setResult(null);\r\n//     setErrorMessage(\"\");\r\n\r\n//     try {\r\n//       const token = localStorage.getItem(\"token\");\r\n//       const response = await axios.post(\"http://localhost:5000/api/upload\", formData, {\r\n//         headers: {\r\n//           \"Content-Type\": \"multipart/form-data\",\r\n//           Authorization: `Bearer ${token}`,\r\n//         },\r\n//       });\r\n\r\n//       // Updated to handle a single result\r\n//       setResult({\r\n//         label: response.data.diagnosis.label,\r\n//         score: response.data.diagnosis.score,\r\n//         imageUrl: response.data.imageUrl,\r\n//       });\r\n//     } catch (error) {\r\n//       setErrorMessage(error.response?.data?.message || \"Error processing image\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"upload-container\">\r\n//       <h2>Plant Disease Detection</h2>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <input type=\"file\" onChange={handleFileChange} />\r\n//         <button type=\"submit\" disabled={loading}>\r\n//           Upload\r\n//         </button>\r\n//       </form>\r\n//       {loading && <p>Loading...</p>}\r\n//       {errorMessage && <p className=\"error\">{errorMessage}</p>}\r\n//       <div className=\"result-container\">\r\n//         {result && (\r\n//           <div className=\"result-box\">\r\n//             <img\r\n//               src={result.imageUrl || \"https://via.placeholder.com/200\"}\r\n//               alt=\"Uploaded Leaf\"\r\n//               style={{ maxWidth: \"200px\", maxHeight: \"200px\" }}\r\n//             />\r\n//             <h3>Disease Detected: {result.label}</h3>\r\n//             <p>Confidence: {(result.score * 100).toFixed(2)}%</p>\r\n//           </div>\r\n//         )}\r\n//         </div>\r\n   \r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default ImageUpload;\r\n// import React, { useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import \"./ImageUpload.css\";\r\n\r\n// function ImageUpload() {\r\n//   const [file, setFile] = useState(null);\r\n//   const [result, setResult] = useState(null);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n//   const handleFileChange = (e) => {\r\n//     setFile(e.target.files[0]);\r\n//     setErrorMessage(\"\"); // Reset error message when selecting a new file\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     if (!file) {\r\n//       setErrorMessage(\"Please select a file to upload.\");\r\n//       return;\r\n//     }\r\n\r\n//     const formData = new FormData();\r\n//     formData.append(\"image\", file);\r\n\r\n//     setLoading(true);\r\n//     setResult(null);\r\n//     setErrorMessage(\"\");\r\n\r\n//     try {\r\n//       const token = localStorage.getItem(\"token\");\r\n//       if (!token) {\r\n//         throw new Error(\"No token found. Please log in again.\");\r\n//       }\r\n\r\n//       const response = await axios.post(\r\n//         \"http://localhost:5000/api/upload\",\r\n//         formData,\r\n//         {\r\n//           headers: {\r\n//             \"Content-Type\": \"multipart/form-data\",\r\n//             Authorization: `Bearer ${token}`,\r\n//           },\r\n//         }\r\n//       );\r\n\r\n//       // Handle the response with a single result\r\n//       setResult({\r\n//         label: response.data.diagnosis.label,\r\n//         score: response.data.diagnosis.score,\r\n//         imageUrl: response.data.imageUrl,\r\n//       });\r\n//     } catch (error) {\r\n//       setErrorMessage(\r\n//         error.response?.data?.message || \"Error processing image\"\r\n//       );\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"upload-container\">\r\n//       <h2>Plant Disease Detection</h2>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <input type=\"file\" onChange={handleFileChange} />\r\n//         <button type=\"submit\" disabled={loading}>\r\n//           {loading ? \"Uploading...\" : \"Upload\"}\r\n//         </button>\r\n//       </form>\r\n//       {loading && <p>Loading...</p>}\r\n//       {errorMessage && <p className=\"error\">{errorMessage}</p>}\r\n//       <div className=\"result-container\">\r\n//         {result && (\r\n//           <div className=\"result-box\">\r\n//             <img\r\n//               src={result.imageUrl || \"https://via.placeholder.com/200\"}\r\n//               alt=\"Uploaded Leaf\"\r\n//               style={{ maxWidth: \"200px\", maxHeight: \"200px\" }}\r\n//             />\r\n//             <h3>Disease Detected: {result.label}</h3>\r\n//             <p>Confidence: {(result.score * 100).toFixed(2)}%</p>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default ImageUpload;\r\nimport React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./ImageUpload.css\";\r\n\r\nfunction ImageUpload() {\r\n  // Define state variables\r\n  const [file, setFile] = useState(null);\r\n  const [previewUrl, setPreviewUrl] = useState(null);\r\n  const [result, setResult] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [diseaseDetails, setDiseaseDetails] = useState(null);\r\n\r\n  const handleFileChange = (e) => {\r\n    const selectedFile = e.target.files[0];\r\n    if (selectedFile) {\r\n      if (selectedFile.size > 2 * 1024 * 1024) {\r\n        setErrorMessage(\"File size must be less than 2MB.\");\r\n        return;\r\n      }\r\n      setFile(selectedFile);\r\n      setPreviewUrl(URL.createObjectURL(selectedFile));\r\n      setErrorMessage(\"\"); // Reset error message\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!file) {\r\n      setErrorMessage(\"Please select a file to upload.\");\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"image\", file);\r\n\r\n    setLoading(true);\r\n    setResult(null);\r\n    setDiseaseDetails(null); // Clear previous details\r\n    setErrorMessage(\"\");\r\n\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n      if (!token) {\r\n        throw new Error(\"No token found. Please log in again.\");\r\n      }\r\n\r\n      // Call the existing API to process the uploaded image\r\n      const response = await axios.post(\r\n        \"http://localhost:5000/api/upload\",\r\n        formData,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      // Set the diagnosis result from the response\r\n      setResult({\r\n        label: response.data.diagnosis.label,\r\n        score: response.data.diagnosis.score,\r\n        imageUrl: response.data.imageUrl,\r\n      });\r\n    } catch (error) {\r\n      setErrorMessage(\r\n        error.response?.data?.message || \"An unexpected error occurred. Please try again.\"\r\n      );\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchDiseaseDetails = async (diseaseName) => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:5000/api/diseases\");\r\n      const disease = response.data.find((d) => d.diseaseName === diseaseName);\r\n\r\n      if (disease) {\r\n        setDiseaseDetails(disease.details);\r\n      } else {\r\n        setDiseaseDetails({\r\n          disease_symptoms: \"Details for this disease are not available.\",\r\n          organic_treatment: \"N/A\",\r\n          inorganic_treatment: \"N/A\",\r\n          preventive_measure: \"N/A\",\r\n          conclusion: \"Please consult a local agricultural expert.\",\r\n        });\r\n      }\r\n    } catch (error) {\r\n      setDiseaseDetails({\r\n        disease_symptoms: \"Failed to fetch disease details.\",\r\n        organic_treatment: \"N/A\",\r\n        inorganic_treatment: \"N/A\",\r\n        preventive_measure: \"N/A\",\r\n        conclusion: \"Please check your internet connection.\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"body\">\r\n      <div className=\"container\">\r\n        {/* Upload Section */}\r\n        <div className=\"upload-section\">\r\n          <h2>Image Uploading</h2>\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"upload-box\">\r\n              <div id=\"upload-preview\">\r\n                {previewUrl ? (\r\n                  <img\r\n                    src={previewUrl}\r\n                    alt=\"Preview\"\r\n                    className=\"upload-icon\"\r\n                    style={{ maxWidth: \"200px\", maxHeight: \"200px\" }}\r\n                  />\r\n                ) : (\r\n                  <img\r\n                    src=\"iupload.png\"\r\n                    alt=\"Upload Icon\"\r\n                    className=\"upload-icon\"\r\n                  />\r\n                )}\r\n                <p>Upload Image</p>\r\n              </div>\r\n              <label htmlFor=\"file-upload\" className=\"upload-label\">\r\n                Select Image\r\n              </label>\r\n              <input\r\n                type=\"file\"\r\n                id=\"file-upload\"\r\n                onChange={handleFileChange}\r\n                accept=\"image/*\"\r\n              />\r\n              <p className=\"file-info\">File size must be less than 2MB</p>\r\n              <p className=\"file-info\">Do not upload other than leaf images</p>\r\n            </div>\r\n            <button type=\"submit\" disabled={loading}>\r\n              {loading ? \"Uploading...\" : \"Upload\"}\r\n            </button>\r\n          </form>\r\n          {loading && <p>Loading...</p>}\r\n          {errorMessage && <p className=\"error\">{errorMessage}</p>}\r\n          <div className=\"note-section\">\r\n            <h3>Note:</h3>\r\n            <ul>\r\n              <li>Do not upload other than leaf images.</li>\r\n              <li>Ensure the file size is less than 2MB.</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Result Section */}\r\n        {result && (\r\n          <div className=\"result-container\">\r\n            <div className=\"result-box\">\r\n              <img\r\n                src={result.imageUrl || \"https://via.placeholder.com/200\"}\r\n                alt=\"Uploaded Leaf\"\r\n                style={{ maxWidth: \"200px\", maxHeight: \"200px\" }}\r\n              />\r\n              <h3>Disease Detected: {result.label}</h3>\r\n              <p>Confidence: {(result.score * 100).toFixed(2)}%</p>\r\n              <button\r\n                onClick={() => fetchDiseaseDetails(result.label)}\r\n                className=\"details-button\"\r\n              >\r\n                Show Disease Details\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Disease Details Section */}\r\n        {diseaseDetails && (\r\n          <div className=\"disease-details\">\r\n            <h3>Disease Details</h3>\r\n            <p><strong>Symptoms:</strong> {diseaseDetails.disease_symptoms}</p>\r\n            <p><strong>Organic Treatment:</strong> {diseaseDetails.organic_treatment}</p>\r\n            <p><strong>Inorganic Treatment:</strong> {diseaseDetails.inorganic_treatment}</p>\r\n            <p><strong>Preventive Measures:</strong> {diseaseDetails.preventive_measure}</p>\r\n            <p><strong>Conclusion:</strong> {diseaseDetails.conclusion}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageUpload;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACr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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}